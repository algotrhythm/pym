The hosts module
================

	>>> import sys
	>>> sys.path.insert(0, '/Volumes/HD/Users/jab/jab/github/parsley')
	>>> import hosts
	>>> print hosts.__doc__
	A module to provide methods to parse hosts files

	>>> import test_parsely

	>>> grammar = hosts.make_hosts_grammar()
	>>> see(grammar(''))
	>>> test_parsely.use_grammar(grammar)

	>>> three_digit_errors = ['', 'a', '1234', '123.']
	>>> not_three_digit_numbers = [('0', 1), ('00', 1)]
	>>> three_digit_numbers = [('0', 0), ('00', 0), ('000', 0), ('1', 1), ('01', 1), ('001', 1), ('12', 12), ('123', 123)]
	>>> test_parsely.try_target('three_digit_number', three_digit_errors, three_digit_numbers)
	True
	>>> test_parsely.verify_target('three_digit_number', three_digit_errors, three_digit_numbers, not_three_digit_numbers)
	True

Single characters
-----------------

	>>> test_parsely.try_target('space', ['', '\t'], [' '])
	True
	>>> test_parsely.try_target('tab', ['', ' '], ['\t'])
	True
	>>> test_parsely.try_target('hash', ['', ' ', '##'], ['#'])
	True
	>>> test_parsely.try_target('colon', ['', ' '], [':'])
	True
	>>> test_parsely.try_target('dot', ['', ' '], ['.'])
	True
	>>> test_parsely.try_target('underscore', ['', '-'], ['_'])
	True
	>>> test_parsely.try_target('blank', ['', 'x'], [' ', '\t'])
	True
	>>> test_parsely.try_target('eol', ['', ' ', '\t'], ['\n', '\r'])
	True
	>>> test_parsely.try_target('ip_v6_char', [':', ' ', '\t'], ['s', '0', '\n'])
	True
	>>> test_parsely.try_target('host_character', ['', '+', ','], ['3', 'd', 'K', '_', '-', '.'])
	True

Multiples
---------

	>>> test_parsely.try_target('some_blanks', ['', 'x'], [' ', '  ', '\t', ' \t ' ])
	True
	>>> test_parsely.try_target('any_blanks', ['x'], ['', ' ', '  ', '\t', ' \t ' ])
	True
	>>> test_parsely.try_target('line', ['', ' '], [('\n', ''), ('your ad here\n', 'your ad here')])
	True
	>>> test_parsely.try_target('blank_line', ['', 'your ad here\n'], [('\n', ''), ('    \n', '    ')])
	True
	>>> test_parsely.try_errors('ip_v6_name', ['', 'no spaces', 'no:colons'])
	True
	>>> test_parsely.try_matches('ip_v6_name', ['local_host'])
	True
	>>> test_parsely.try_target('ip_v6_name', ['', 'no spaces'], ['local_host', 'fe80'])
	True
	>>> test_parsely.try_target('ip_number', ['', 'abc', '257', '1111'], [('1', 1), ('22', 22), ('255', 255)])
	True

Structures
----------
	>>> test_parsely.try_target('ip_v4_address', ['', '.', '..', '...', '::1', '0...', '999.0.0.1'], ['127.0.0.1', '255.255.255.255'])
	True
	>>> test_parsely.try_target('ip_v6_address', ['', ':', '::', '127.0.0.1'], ['::1', 'fe80::1%lo0'])
	True
	>>> test_parsely.try_target('ip_address', [''], ['::1', '127.0.0.1'])
	True
	>>> test_parsely.try_target('host_name', ['', '::1', '127.0.0.1'], ['localhost', 'my-server.com'])
	True
	>>> test_parsely.try_target('host_names', ['', '::1', '127.0.0.1'], [
	...     ('localhost', ['localhost']),
	...      ('localhost my-server.com', ['localhost', 'my-server.com']),
	...      ('localhost\tmy-server.com', ['localhost', 'my-server.com'])
	... ])
	True
	>>> test_parsely.try_target('host_line', [''], [
	...      ('127.0.0.1       	dhcp92 localhost\n', ('127.0.0.1', ['dhcp92', 'localhost'])),
	...      ('::1             	localhost\n', ('::1', ['localhost'])),
	...      ('85.17.181.232      *.google.com\n', ('85.17.181.232', ['*.google.com'])),
	... ])
	True
	>>> test_parsely.try_target('host_lines', [''], [
	...     (
	...         '127.0.0.1        dhcp92 localhost\n::1              localhost\n',
	...         [('127.0.0.1', ['dhcp92', 'localhost']),
	...          ('::1', ['localhost'])]
	...     )
	... ])
	True
	>>> test_parsely.try_target('comment_line', [''], [('#\n',''), ('# comment\n', ' comment')])
	True
	>>> test_parsely.try_parse('comment_lines', '#\n# comment\n')
	['', ' comment']
	>>> test_parsely.try_parse('comment_lines', '#\n')
	['']
	>>> test_parsely.try_target('comment_lines', ['k'], [('#\n', ['']), ('#\n# comment\n', ['', ' comment'])])
	True
